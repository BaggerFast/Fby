# Generated by Django 3.1.7 on 2021-03-30 08:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marketSku', models.CharField(blank=True, max_length=255, null=True, verbose_name='SKU на Яндексе')),
                ('updatedAt', models.DateTimeField(null=True, verbose_name='Дата и время последнего обновления цены на товар')),
                ('shopSku', models.CharField(max_length=255, null=True, verbose_name='Ваш SKU')),
                ('name', models.CharField(help_text='Составляйте по схеме: тип товара + бренд или производитель + модель + отличительные характеристики.', max_length=255, null=True, verbose_name='Название товара')),
                ('category', models.CharField(max_length=255, null=True, verbose_name='Категория')),
                ('manufacturer', models.CharField(help_text='Компания, которая произвела товар, ее адрес и регистрационный номер (если есть)', max_length=255, null=True, verbose_name='Изготовитель')),
                ('vendor', models.CharField(max_length=255, null=True, verbose_name='Торговая марка')),
                ('vendorCode', models.CharField(blank=True, max_length=255, null=True, verbose_name='Артикул производителя')),
                ('description', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Описание товара')),
                ('certificate', models.CharField(help_text='Документ по его номеру можно найти в личном кабинете магазина', max_length=255, null=True, verbose_name='Номер документа на товар')),
                ('availability', models.CharField(blank=True, choices=[('ACTIVE', 'поставки будут'), ('INACTIVE', 'поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на DELISTED'), ('DELISTED', 'архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на INACTIVE.')], max_length=8, null=True, verbose_name='Планы по поставкам')),
                ('transportUnitSize', models.PositiveSmallIntegerField(blank=True, help_text='Сколько товаров в упаковке. Поле используется, если вы поставляете товар упаковками, а продаете поштучно. Например, вы продаете детское питание по 1 баночке, а коробка содержит 6 баночек.', null=True, verbose_name='Количество товаров в упаковке')),
                ('minShipment', models.PositiveSmallIntegerField(blank=True, help_text='Минимальное количество товаров, которое вы готовы привозить на склад. Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, то ваша минимальная партия — 60 баночек.', null=True, verbose_name='Минимальная партия поставки')),
                ('quantumOfSupply', models.PositiveSmallIntegerField(blank=True, help_text='По сколько товаров можно добавлять к минимальной партии. Например, вы планируете поставлять детское питание партиями, причем к минимальной партии хотите прибавлять минимум по 2 коробки, а в каждой коробке по 6 баночек. Тогда добавочная партия — 12 баночек, а к минимальной партии можно добавлять 12, 24, 36 баночек и т. д.', null=True, verbose_name='Добавочная партия')),
                ('deliveryDurationDays', models.PositiveSmallIntegerField(blank=True, help_text='За какое время вы поставите товар на склад.(в днях)', null=True, verbose_name='Срок поставки')),
                ('boxCount', models.PositiveIntegerField(blank=True, help_text='Если нет — оставьте поле пустым. Если да — укажите количество мест (например, кондиционер занимает 2 грузовых места — внешний и внутренний блоки в двух коробках).', null=True, verbose_name='Товар занимает больше одного места')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offer', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('READY', 'товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену и создайте поставку на склад. Подробнее см. в разделе Загрузка каталога товаров, а также в разделе "Как поставить товары на склад" Справки Маркета для моделей FBY, FBY+ и FBS'), ('IN_WORK', 'товар проходит модерацию. Это занимает несколько дней'), ('NEED_CONTENT', 'для товара без SKU на Яндексе market_sku нужно найти карточку самостоятельно (через API или личный кабинет магазина) или создать ее, если товар еще не продается на Маркете'), ('NEED_INFO', 'товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре notes'), ('REJECTED', 'товар не прошел модерацию, так как Маркет не планирует размещать подобные товары'), ('SUSPENDED', 'товар не прошел модерацию, так как Маркет пока не размещает подобные товары'), ('OTHER', 'товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру')], help_text='Можно продавать или нет', max_length=12, null=True, verbose_name='Cтатус')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processingState_set', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='WeightDimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.FloatField(blank=True, help_text='Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 65.55', null=True, verbose_name='Длина, см')),
                ('width', models.FloatField(blank=True, help_text='Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 50.7', null=True, verbose_name='Ширина, см')),
                ('height', models.FloatField(blank=True, help_text='Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 20.0', null=True, verbose_name='Высота, см')),
                ('weight', models.FloatField(blank=True, help_text='С учетом упаковки (брутто). Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 1.001', null=True, verbose_name='Вес в упаковке (брутто), кг')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weightDimensions', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=2000, verbose_name='Сслыка на фото')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='SupplyScheduleDays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplyScheduleDay', models.CharField(choices=[('MONDAY', 'понедельник'), ('TUESDAY', 'вторник'), ('WEDNESDAY', 'среда'), ('THURSDAY', 'четверг'), ('FRIDAY', 'пятница'), ('SATURDAY', 'суббота'), ('SUNDAY', 'воскресенье')], help_text='Дни недели, когда вы готовы поставлять товары на склад маркетплейса. Заполняйте поле, чтобы получать рекомендации о пополнении товаров на складе.', max_length=9, null=True, verbose_name='Дни поставки')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplyScheduleDays', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='ShelfLife',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timePeriod', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeUnit', models.CharField(blank=True, choices=[('HOUR', 'часы'), ('DAY', 'дни'), ('WEEK', 'недели'), ('MONTH', 'месяцы'), ('YEAR', 'годы')], max_length=5, null=True, verbose_name='Единица измерения')),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessingStateNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ASSORTMENT', 'товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар'), ('CANCELLED', 'товар отозван с модерации по вашей инициативе'), ('CONFLICTING_INFORMATION', 'вы предоставили потиворечивую информацию о товаре. Параметры, которые нужно исправить, указаны в параметре payload'), ('DEPARTMENT_FROZEN', 'правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию'), ('INCORRECT_INFORMATION', 'информация о товаре, которую вы предоставили, противоречит описанию от производителя. Параметры, которые нужно исправить, указаны в параметре payload'), ('LEGAL_CONFLICT', 'товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу'), ('NEED_CLASSIFICATION_INFORMATION', 'информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар'), ('NEED_INFORMATION', 'товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку'), ('NEED_PICTURES', 'для идентификации товара нужны его изображения'), ('NEED_VENDOR', 'неверно указан производитель товара'), ('NO_CATEGORY', 'товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'), ('NO_KNOWLEDGE', 'товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'), ('NO_PARAMETERS_IN_SHOP_TITLE', 'товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь. Параметры, которые нужно добавить в название товара, указаны в параметре payload'), ('NO_SIZE_MEASURE', 'для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру. Требования к размерной сетке указаны в параметре payload'), ('UNKNOWN', 'товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру')], max_length=31, null=True, verbose_name='Тип причины, по которой товар не прошел модерацию')),
                ('payload', models.CharField(help_text='Возвращается, если параметр type имеет одно из следующих значений: CONFLICTING_INFORMATION, INCORRECT_INFORMATION, NO_PARAMETERS_IN_SHOP_TITLE, NO_SIZE_MEASURE.', max_length=2000, null=True, verbose_name='Дополнительная информация о причине отклонения товара')),
                ('processingState', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.processingstate', verbose_name='Причины, по которым товар не прошел модерацию')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discountBase', models.FloatField(null=True, verbose_name='Цена на товар без скидки.')),
                ('value', models.FloatField(null=True, verbose_name='Цена на товар.')),
                ('vat', models.IntegerField(help_text='\n                   Идентификатор ставки НДС, применяемой для товара:\n                   2 — 10%.\n                   5 — 0%.\n                   6 — не облагается НДС.\n                   7 — 20%.\n                   Если параметр не указан, используется ставка НДС, установленная в личном кабинете магазина.\n                   ', null=True, verbose_name='Идентификатор ставки НДС')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='price', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marketSku', models.PositiveSmallIntegerField(null=True, verbose_name='SKU на Яндексе — идентификатор текущей карточки товара на Маркете')),
                ('modelId', models.PositiveSmallIntegerField(help_text='Например, две лопатки разных цветов имеют разные SKU на Яндексе (параметр market_sku), но одинаковый идентификатор модели товара', null=True, verbose_name='Идентификатор модели для текущей карточки товара на Маркете')),
                ('categoryId', models.PositiveSmallIntegerField(null=True, verbose_name='Идентификатор категории для текущей карточки товара на Маркете')),
                ('mappingType', models.CharField(choices=[('BASE', 'Информация о текущей карточке товара на Маркете'), ('AWAITING_MODERATION', 'Информация о карточке товара на Маркете, проходящей модерацию для данного товара'), ('REJECTED', 'Информация о последней карточке товара на Маркете, отклоненной на модерации для данного товара')], max_length=19, null=True, verbose_name='Тип маппинга')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_set', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='ManufacturerCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Страна производства товара')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manufacturerCountries', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='LifeTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timePeriod', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeUnit', models.CharField(blank=True, choices=[('HOUR', 'часы'), ('DAY', 'дни'), ('WEEK', 'недели'), ('MONTH', 'месяцы'), ('YEAR', 'годы')], max_length=5, null=True, verbose_name='Единица измерения')),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuaranteePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timePeriod', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeUnit', models.CharField(blank=True, choices=[('HOUR', 'часы'), ('DAY', 'дни'), ('WEEK', 'недели'), ('MONTH', 'месяцы'), ('YEAR', 'годы')], max_length=5, null=True, verbose_name='Единица измерения')),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomsCommodityCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='Укажите 10 или 14 цифр без пробелов.', max_length=10, null=True, verbose_name='Код ТН ВЭД')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customsCommodityCodes', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='Barcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.CharField(blank=True, help_text='Штрихкод обязателен при размещении товара по модели FBY и FBY+. Допустимые форматы: EAN-13, EAN-8, UPC-A, UPC-E, Code 128. Для книг — ISBN-10 или ISBN-13. Для товаров определённых производителей передайте только код GTIN. Если штрихкодов несколько, укажите их через запятую.', max_length=255, null=True, verbose_name='Штрихкод')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.offer')),
            ],
        ),
    ]
