# Generated by Django 3.1.7 on 2021-04-17 17:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image', models.ImageField(upload_to='', verbose_name='аватарка')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор региона доставки')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Название региона доставки')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offerName', models.CharField(max_length=255, null=True, verbose_name='Название товара')),
                ('marketSku', models.PositiveIntegerField(null=True, verbose_name='SKU на Яндексе')),
                ('shopSku', models.CharField(max_length=255, null=True, verbose_name='SKU товара в нашем магазине')),
                ('count', models.PositiveIntegerField(help_text='Если из заказа удалены все единицы товара, он попадет только в список initialItems.', null=True, verbose_name='Количество единиц товара с учетом удаленных единиц')),
            ],
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marketSku', models.CharField(blank=True, max_length=255, null=True, verbose_name='SKU на Яндексе')),
                ('updatedAt', models.DateTimeField(null=True, verbose_name='Дата и время последнего обновления цены на товар')),
                ('shopSku', models.CharField(max_length=255, null=True, verbose_name='Ваш SKU')),
                ('name', models.CharField(help_text='Составляйте по схеме: тип товара + бренд или производитель + модель + отличительные характеристики.', max_length=255, null=True, verbose_name='Название товара')),
                ('category', models.CharField(max_length=255, null=True, verbose_name='Категория')),
                ('manufacturer', models.CharField(help_text='Компания, которая произвела товар, ее адрес и регистрационный номер (если есть)', max_length=255, null=True, verbose_name='Изготовитель')),
                ('vendor', models.CharField(max_length=255, null=True, verbose_name='Торговая марка')),
                ('vendorCode', models.CharField(blank=True, max_length=255, null=True, verbose_name='Артикул производителя')),
                ('description', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Описание товара')),
                ('certificate', models.CharField(help_text='Документ по его номеру можно найти в личном кабинете магазина', max_length=255, null=True, verbose_name='Номер документа на товар')),
                ('availability', models.CharField(blank=True, choices=[('ACTIVE', 'поставки будут'), ('INACTIVE', 'поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на DELISTED'), ('DELISTED', 'архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на INACTIVE.')], max_length=8, null=True, verbose_name='Планы по поставкам')),
                ('transportUnitSize', models.PositiveSmallIntegerField(blank=True, help_text='Сколько товаров в упаковке. Поле используется, если вы поставляете товар упаковками, а продаете поштучно. Например, вы продаете детское питание по 1 баночке, а коробка содержит 6 баночек.', null=True, verbose_name='Количество товаров в упаковке')),
                ('minShipment', models.PositiveSmallIntegerField(blank=True, help_text='Минимальное количество товаров, которое вы готовы привозить на склад. Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, то ваша минимальная партия — 60 баночек.', null=True, verbose_name='Минимальная партия поставки')),
                ('quantumOfSupply', models.PositiveSmallIntegerField(blank=True, help_text='По сколько товаров можно добавлять к минимальной партии. Например, вы планируете поставлять детское питание партиями, причем к минимальной партии хотите прибавлять минимум по 2 коробки, а в каждой коробке по 6 баночек. Тогда добавочная партия — 12 баночек, а к минимальной партии можно добавлять 12, 24, 36 баночек и т. д.', null=True, verbose_name='Добавочная партия')),
                ('deliveryDurationDays', models.PositiveSmallIntegerField(blank=True, help_text='За какое время вы поставите товар на склад.(в днях)', null=True, verbose_name='Срок поставки')),
                ('boxCount', models.PositiveIntegerField(blank=True, help_text='Если нет — оставьте поле пустым. Если да — укажите количество мест (например, кондиционер занимает 2 грузовых места — внешний и внутренний блоки в двух коробках).', null=True, verbose_name='Товар занимает больше одного места')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offer', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.PositiveIntegerField(verbose_name='Идентификатор заказа')),
                ('creationDate', models.DateField(help_text='Формат даты: ГГГГ‑ММ‑ДД', null=True, verbose_name='Дата создания заказа')),
                ('status', models.CharField(choices=[('CANCELLED_BEFORE_PROCESSING', 'заказ отменен до начала его обработки'), ('CANCELLED_IN_DELIVERY', 'заказ отменен во время его доставки'), ('CANCELLED_IN_PROCESSING', 'заказ отменен во время его обработки'), ('DELIVERY', 'заказ передан службе доставки'), ('DELIVERED', 'заказ доставлен'), ('PARTIALLY_RETURNED', 'заказ частично возвращен покупателем'), ('PICKUP', 'заказ доставлен в пункт выдачи'), ('PROCESSING', 'заказ в обработке'), ('REJECTED', 'заказ создан, но не оплачен'), ('RETURNED', 'заказ полностью возвращен покупателем'), ('UNKNOWN', 'неизвестный статус заказа')], max_length=27, null=True, verbose_name='Текущий статус заказа')),
                ('statusUpdateDate', models.DateTimeField(help_text='Формат даты и времени: ISO 8601. Например, 2017-11-21T00:00:00. Часовой пояс — UTC+03:00 (Москва)', null=True, verbose_name='Дата и время, когда статус заказа был изменен в последний раз')),
                ('paymentType', models.CharField(choices=[('CREDIT', 'заказ оформлен в кредит'), ('POSTPAID', 'заказ оплачен после того, как был получен'), ('PREPAID', 'заказ оплачен до того, как был получен')], max_length=8, null=True, verbose_name='Тип оплаты заказа')),
                ('partnerOrderId', models.PositiveIntegerField(null=True, verbose_name='Идентификатор заказа партнера')),
                ('deliveryRegion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.deliveryregion', verbose_name='Информация о регионе доставки')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=255, null=True, verbose_name='Идентификатор денежного перевода')),
                ('date', models.DateField(help_text='Формат даты: ГГГГ‑ММ‑ДД', null=True, verbose_name='Дата денежного перевода')),
                ('type', models.CharField(choices=[('PAYMENT', 'оплата'), ('REFUND', 'возврат')], max_length=7, null=True, verbose_name='Тип денежного перевода')),
                ('source', models.CharField(choices=[('BUYER', 'оплата или возврат деньгами'), ('CASHBACK', 'оплата или возврат баллами кешбэка по подписке Яндекс Плюс'), ('MARKETPLACE', 'оплата или возврат Маркет Бонусами'), ('SPASIBO', 'оплата или возврат бонусами СберСпасибо')], max_length=11, null=True, verbose_name='Способ денежного перевода')),
                ('total', models.DecimalField(decimal_places=2, help_text='Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой', max_digits=10, null=True, verbose_name='Сумма денежного перевода')),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='main.order', verbose_name='Информация о денежных переводах по заказу')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessingState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('READY', 'товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену и создайте поставку на склад. Подробнее см. в разделе Загрузка каталога товаров, а также в разделе "Как поставить товары на склад" Справки Маркета для моделей FBY, FBY+ и FBS'), ('IN_WORK', 'товар проходит модерацию. Это занимает несколько дней'), ('NEED_CONTENT', 'для товара без SKU на Яндексе market_sku нужно найти карточку самостоятельно (через API или личный кабинет магазина) или создать ее, если товар еще не продается на Маркете'), ('NEED_INFO', 'товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре notes'), ('REJECTED', 'товар не прошел модерацию, так как Маркет не планирует размещать подобные товары'), ('SUSPENDED', 'товар не прошел модерацию, так как Маркет пока не размещает подобные товары'), ('OTHER', 'товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру')], help_text='Можно продавать или нет', max_length=12, null=True, verbose_name='Cтатус')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='processingState', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='Sku',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shopSku', models.CharField(max_length=255, null=True, verbose_name='Ваш SKU')),
                ('marketSku', models.PositiveSmallIntegerField(null=True, verbose_name='SKU на Яндексе — идентификатор текущей карточки товара на Маркете')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Название товара')),
                ('price', models.FloatField(blank=True, null=True, verbose_name='Цена на товар, выставленная партнером')),
                ('categoryId', models.BigIntegerField(blank=True, null=True, verbose_name='Идентификатор категории товара на Маркете')),
                ('categoryName', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название категории товара на Маркете')),
            ],
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warehouse_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор склада')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Название склада')),
            ],
        ),
        migrations.CreateModel(
            name='WeightDimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.FloatField(blank=True, help_text='Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 65.55', null=True, verbose_name='Длина, см')),
                ('width', models.FloatField(blank=True, help_text='Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 50.7', null=True, verbose_name='Ширина, см')),
                ('height', models.FloatField(blank=True, help_text='Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 20.0', null=True, verbose_name='Высота, см')),
                ('weight', models.FloatField(blank=True, help_text='С учетом упаковки (брутто). Значение с точностью до тысячных, разделитель целой и дробной части — точка. Пример: 1.001', null=True, verbose_name='Вес в упаковке (брутто), кг')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='weightDimensions', to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=2000, verbose_name='Ссылка на фото')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='SupplyScheduleDays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplyScheduleDay', models.CharField(choices=[('MONDAY', 'понедельник'), ('TUESDAY', 'вторник'), ('WEDNESDAY', 'среда'), ('THURSDAY', 'четверг'), ('FRIDAY', 'пятница'), ('SATURDAY', 'суббота'), ('SUNDAY', 'воскресенье')], help_text='Дни недели, когда вы готовы поставлять товары на склад маркетплейса. Заполняйте поле, чтобы получать рекомендации о пополнении товаров на складе.', max_length=9, null=True, verbose_name='Дни поставки')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplyScheduleDays', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='ShelfLife',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timePeriod', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeUnit', models.CharField(blank=True, choices=[('HOUR', 'часы'), ('DAY', 'дни'), ('WEEK', 'недели'), ('MONTH', 'месяцы'), ('YEAR', 'годы')], max_length=5, null=True, verbose_name='Единица измерения')),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shelfLife', to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessingStateNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ASSORTMENT', 'товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар'), ('CANCELLED', 'товар отозван с модерации по вашей инициативе'), ('CONFLICTING_INFORMATION', 'вы предоставили потиворечивую информацию о товаре. Параметры, которые нужно исправить, указаны в параметре payload'), ('DEPARTMENT_FROZEN', 'правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию'), ('INCORRECT_INFORMATION', 'информация о товаре, которую вы предоставили, противоречит описанию от производителя. Параметры, которые нужно исправить, указаны в параметре payload'), ('LEGAL_CONFLICT', 'товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу'), ('NEED_CLASSIFICATION_INFORMATION', 'информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар'), ('NEED_INFORMATION', 'товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку'), ('NEED_PICTURES', 'для идентификации товара нужны его изображения'), ('NEED_VENDOR', 'неверно указан производитель товара'), ('NO_CATEGORY', 'товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'), ('NO_KNOWLEDGE', 'товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'), ('NO_PARAMETERS_IN_SHOP_TITLE', 'товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь. Параметры, которые нужно добавить в название товара, указаны в параметре payload'), ('NO_SIZE_MEASURE', 'для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру. Требования к размерной сетке указаны в параметре payload'), ('UNKNOWN', 'товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру')], max_length=31, null=True, verbose_name='Тип причины, по которой товар не прошел модерацию')),
                ('payload', models.CharField(help_text='Возвращается, если параметр type имеет одно из следующих значений: CONFLICTING_INFORMATION, INCORRECT_INFORMATION, NO_PARAMETERS_IN_SHOP_TITLE, NO_SIZE_MEASURE.', max_length=2000, null=True, verbose_name='Дополнительная информация о причине отклонения товара')),
                ('processingState', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.processingstate', verbose_name='Причины, по которым товар не прошел модерацию')),
            ],
        ),
        migrations.CreateModel(
            name='PriceSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('type', models.CharField(blank=True, choices=[('BUYBOX', 'минимальная цена на Маркете. Это самая низкая цена из предложенных партнерами Маркета, и поней товар продается сейчас. Эта цена обновляется в режиме реального времени. Если вы установите цену нижеили равной минимальной, начнет показываться ваше предложение. Если для этого значения в параметре priceуказана цена, которая совпадает с вашей, значит, ваш товар уже показывается на витрине. Если кроме вас этоттовар продают другие продавцы по такой же цене, их предложения также будут отображаться вместе с вашимипо очереди.'), ('DEFAULT_OFFER', 'рекомендованная Маркетом цена, которая привлекает покупателей. Рассчитываетсятолько для популярных на сервисе товаров и обновляется раз в четыре часа.'), ('MIN_PRICE_MARKET', 'минимальная цена на Маркете. Самая низкая цена среди всех предложенийтовара на Маркете. Эта цена обновляется в режиме реального времени и обеспечивает большее количество показовна Маркете, чем минимальная на Маркете и рекомендованная цена.'), ('MAX_DISCOUNT_BASE', 'максимальная цена товара без скидки (старая цена), при которой он можетбыть показан со скидкой. Данная цена рассчитывается автоматически на основе SKU на Яндексе.'), ('MARKET_OUTLIER_PRICE', 'максимальная цена товара, которая обеспечивает показы на Маркете.Если ваша цена выше указанной, товар будет скрыт, так как цена превышает медианную на Маркете на20% или более.')], max_length=21, null=True, verbose_name='Типы цен')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='priceSuggestion', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discountBase', models.FloatField(blank=True, null=True, verbose_name='Цена на товар без скидки.')),
                ('value', models.FloatField(blank=True, null=True, verbose_name='Цена на товар.')),
                ('vat', models.IntegerField(blank=True, choices=[(2, '10 %'), (5, '0 %'), (6, 'не облагается'), (7, '20 %')], help_text='Если параметр не указан, используется ставка НДС, установленная в личном кабинете магазина.', null=True, verbose_name='Идентификатор ставки НДС')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='price', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_order_id', models.IntegerField(null=True, verbose_name='Номер платежного поручения')),
                ('date', models.DateField(help_text='Формат даты: ГГГГ‑ММ‑ДД', null=True, verbose_name='Дата платежного поручения')),
                ('payment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paymentOrder', to='main.payment', verbose_name='Информация о платежном поручении')),
            ],
        ),
        migrations.CreateModel(
            name='Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marketSku', models.PositiveSmallIntegerField(null=True, verbose_name='SKU на Яндексе — идентификатор текущей карточки товара на Маркете')),
                ('modelId', models.PositiveSmallIntegerField(help_text='Например, две лопатки разных цветов имеют разные SKU на Яндексе (параметр market_sku), но одинаковый идентификатор модели товара', null=True, verbose_name='Идентификатор модели для текущей карточки товара на Маркете')),
                ('categoryId', models.PositiveSmallIntegerField(null=True, verbose_name='Идентификатор категории для текущей карточки товара на Маркете')),
                ('mappingType', models.CharField(choices=[('BASE', 'Информация о текущей карточке товара на Маркете'), ('AWAITING_MODERATION', 'Информация о карточке товара на Маркете, проходящей модерацию для данного товара'), ('REJECTED', 'Информация о последней карточке товара на Маркете, отклоненной на модерации для данного товара')], max_length=19, null=True, verbose_name='Тип маппинга')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_set', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='ManufacturerCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Страна производства товара')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manufacturerCountries', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='LifeTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timePeriod', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeUnit', models.CharField(blank=True, choices=[('HOUR', 'часы'), ('DAY', 'дни'), ('WEEK', 'недели'), ('MONTH', 'месяцы'), ('YEAR', 'годы')], max_length=5, null=True, verbose_name='Единица измерения')),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lifeTime', to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('BUYER', 'цена на товар с учетом скидок, в том числе Маркет Бонусов и бонусов СберСпасибо'), ('CASHBACK', 'баллы кешбэка по подписке Яндекс Плюс'), ('MARKETPLACE', 'Маркет Бонусы'), ('SPASIBO', 'бонусы СберСпасибо')], max_length=11, null=True, verbose_name='Тип скидки или цена на товар')),
                ('costPerItem', models.DecimalField(decimal_places=2, help_text='Указана в рублях. Точность — два знака после запятой', max_digits=10, null=True, verbose_name='Цена или скидка на единицу товара в заказе')),
                ('total', models.DecimalField(decimal_places=2, help_text='Указана в рублях. Точность — два знака после запятой', max_digits=10, null=True, verbose_name='Суммарная цена или скидка на все единицы товара в заказе')),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='main.item', verbose_name='Цена или скидки на товар')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='order',
            field=models.ForeignKey(help_text='В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя. Если из заказа удалены все единицы товара, его не будет в списке items — только в списке initialItems. Если в заказе осталась хотя бы одна единица товара, он будет и в списке items (с уменьшенным количеством единиц count), и в списке initialItems (с первоначальным количеством единиц initialCount).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.order', verbose_name='Список товаров в заказе после возможных изменений'),
        ),
        migrations.AddField(
            model_name='item',
            name='warehouse',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.warehouse', verbose_name='Информация о складе, на котором хранится товар'),
        ),
        migrations.CreateModel(
            name='InitialItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offerName', models.CharField(max_length=255, null=True, verbose_name='Название товара')),
                ('marketSku', models.PositiveIntegerField(null=True, verbose_name='SKU на Яндексе')),
                ('shopSku', models.CharField(max_length=255, null=True, verbose_name='SKU товара в нашем магазине')),
                ('initialCount', models.PositiveIntegerField(null=True, verbose_name='Первоначальное количество единиц товара')),
                ('order', models.ForeignKey(help_text='В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя. Если из заказа удалены все единицы товара, его не будет в списке items — только в списке initialItems. Если в заказе осталась хотя бы одна единица товара, он будет и в списке items (с уменьшенным количеством единиц count), и в списке initialItems (с первоначальным количеством единиц initialCount).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='initialItems', to='main.order', verbose_name='Список товаров в заказе до изменений')),
            ],
        ),
        migrations.CreateModel(
            name='GuaranteePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timePeriod', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeUnit', models.CharField(blank=True, choices=[('HOUR', 'часы'), ('DAY', 'дни'), ('WEEK', 'недели'), ('MONTH', 'месяцы'), ('YEAR', 'годы')], max_length=5, null=True, verbose_name='Единица измерения')),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='guaranteePeriod', to='main.offer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Detail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemStatus', models.CharField(choices=[('REJECTED', 'товар был добавлен в созданный заказ, но не был оплачен'), ('RETURNED', 'товар вернули')], max_length=8, null=True, verbose_name='Статус товара')),
                ('itemCount', models.PositiveIntegerField(null=True, verbose_name='Количество товара со статусом, указанном в параметре itemStatus')),
                ('updateDate', models.DateField(help_text='Формат даты: ГГГГ‑ММ‑ДД', null=True, verbose_name='Дата, когда товар получил статус, указанный в параметре itemStatus')),
                ('stockType', models.CharField(choices=[('DEFECT', 'товар бракованный'), ('FIT', 'товар надлежащего качества')], max_length=6, null=True, verbose_name='Тип товара')),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='details', to='main.item', verbose_name='Информация об удалении товара из заказа')),
            ],
        ),
        migrations.CreateModel(
            name='CustomsCommodityCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='Укажите 10 или 14 цифр без пробелов.', max_length=10, null=True, verbose_name='Код ТН ВЭД')),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customsCommodityCodes', to='main.offer')),
            ],
        ),
        migrations.CreateModel(
            name='Commission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('AGENCY', 'прием и перечисление денег от покупателя (агентское вознаграждение)'), ('FEE', 'комиссия за размещение товара на Маркете'), ('FULFILLMENT', 'комиссия за хранение товара на складе Маркета')], max_length=11, null=True, verbose_name='Тип комиссии')),
                ('actual', models.DecimalField(decimal_places=2, help_text='Точность — два знака после запятой', max_digits=10, null=True, verbose_name='Сумма комиссии в рублях, которая была выставлена в момент создания заказа и которую нужно оплатить')),
                ('predicted', models.DecimalField(decimal_places=2, help_text='Точность — два знака после запятой', max_digits=10, null=True, verbose_name='Сумма комиссии в рублях, которая была бы выставлена, если бы заказ был создан в момент формирования отчета по заказам')),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commissions', to='main.order', verbose_name='Информация о комиссиях за заказ')),
            ],
        ),
        migrations.CreateModel(
            name='Barcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.CharField(blank=True, help_text='Штрихкод обязателен при размещении товара по модели FBY и FBY+. Допустимые форматы: EAN-13, EAN-8, UPC-A, UPC-E, Code 128. Для книг — ISBN-10 или ISBN-13. Для товаров определённых производителей передайте только код GTIN. Если штрихкодов несколько, укажите их через запятую.', max_length=255, null=True, verbose_name='Штрихкод')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='main.offer')),
            ],
        ),
    ]
